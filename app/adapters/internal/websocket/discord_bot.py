"""Discord Bot Ïª§Îß®Îìú Ï†ïÏùò"""

import os
from decimal import Decimal
from typing import Any

import discord
from discord.ext import commands

from app.adapters.external.discord.adapter import DiscordAdapter
from app.application.dto.order_dto import OrderError
from app.application.usecase.account_usecase import AccountUseCase
from app.application.usecase.infinite_buying_usecase import InfiniteBuyingUsecase
from app.application.usecase.order_usecase import OrderUseCase
from app.application.usecase.ticker_usecase import TickerUseCase
from app.domain.constants import DiscordConstants
from app.domain.types import (
    InfiniteBuyingStatus,
    MarketName,
)

# Í¥ÄÎ¶¨Ïûê ÏÇ¨Ïö©Ïûê ID (ÌôòÍ≤Ω Î≥ÄÏàòÏóêÏÑú Í∞ÄÏ†∏Ïò¥)
ADMIN_USER_IDS = set()
if admin_ids := os.getenv("DISCORD_ADMIN_USER_IDS"):
    ADMIN_USER_IDS = {int(uid.strip()) for uid in admin_ids.split(",")}

# Í±∞Îûò Ï†úÌïú ÏÉÅÏàò
MAX_TRADE_AMOUNT_KRW = 1_000_000  # ÏµúÎåÄ Í±∞Îûò Í∏àÏï°: 100ÎßåÏõê
MAX_TRADE_VOLUME_BTC = 0.01  # ÏµúÎåÄ BTC Í±∞ÎûòÎüâ: 0.01 BTC

# Î¨¥ÌïúÎß§ÏàòÎ≤ï ÏÉÅÏàò
MIN_INITIAL_BUY_AMOUNT = 5000  # ÏµúÏÜå Ï¥àÍ∏∞ Îß§Ïàò Í∏àÏï°
MIN_PRICE_DROP_THRESHOLD = -0.5  # ÏµúÏÜå ÌïòÎùΩ Í∏∞Ï§Ä (-50%)


def _is_admin(user_id: int) -> bool:
    """Í¥ÄÎ¶¨Ïûê Í∂åÌïú Í≤ÄÏ¶ù"""
    return user_id in ADMIN_USER_IDS


def _create_trade_confirmation_embed(
    action: str, market: MarketName, amount_or_volume: str, price: str | None = None
) -> discord.Embed:
    """Í±∞Îûò ÌôïÏù∏Ïö© Embed ÏÉùÏÑ±"""
    embed = discord.Embed(
        title=f"üîí {action} Ï£ºÎ¨∏ ÌôïÏù∏",
        description=f"**{market}** {action} Ï£ºÎ¨∏ÏùÑ Ïã§ÌñâÌïòÏãúÍ≤†ÏäµÎãàÍπå?",
        color=DiscordConstants.COLOR_WARNING,
    )

    if price:
        # ÏßÄÏ†ïÍ∞Ä Ï£ºÎ¨∏Ïù∏ Í≤ΩÏö∞
        price_formatted = f"{float(price):,.0f} KRW"

        # ÎßàÏºìÏóêÏÑú ÌÜµÌôî Ï∂îÏ∂úÌïòÏó¨ Ï†ÅÏ†àÌïú Ìè¨Îß∑ Ï†ÅÏö©
        if "KRW" in amount_or_volume:
            # ÏãúÏû•Í∞Ä Îß§ÏàòÏù∏ Í≤ΩÏö∞ (Í∏àÏï°)
            clean_amount = amount_or_volume.replace(" KRW", "").replace(",", "")
            amount_formatted = f"{float(clean_amount):,.0f} KRW"
        else:
            # ÏàòÎüâÏù∏ Í≤ΩÏö∞ (ÏïîÌò∏ÌôîÌèê)
            target_currency = market.split("-")[1] if "-" in market else "BTC"
            amount_formatted = _format_currency_amount(
                float(amount_or_volume), target_currency
            )

        embed.add_field(name="Ï£ºÎ¨∏ Ïú†Ìòï", value="ÏßÄÏ†ïÍ∞Ä", inline=True)
        embed.add_field(name="Í∞ÄÍ≤©", value=price_formatted, inline=True)
        embed.add_field(name="ÏàòÎüâ", value=amount_formatted, inline=True)
    else:
        # ÏãúÏû•Í∞Ä Ï£ºÎ¨∏Ïù∏ Í≤ΩÏö∞
        if "KRW" in amount_or_volume:
            clean_amount = amount_or_volume.replace(" KRW", "").replace(",", "")
            amount_formatted = f"{float(clean_amount):,.0f} KRW"
        else:
            target_currency = market.split("-")[1] if "-" in market else "BTC"
            amount_formatted = _format_currency_amount(
                float(amount_or_volume), target_currency
            )

        embed.add_field(name="Ï£ºÎ¨∏ Ïú†Ìòï", value="ÏãúÏû•Í∞Ä", inline=True)
        embed.add_field(name="Í∏àÏï°/ÏàòÎüâ", value=amount_formatted, inline=True)

    embed.add_field(
        name=f"{DiscordConstants.EMOJI_WARNING} Ï£ºÏùòÏÇ¨Ìï≠",
        value=f"{DiscordConstants.EMOJI_CONFIRM} ÎòêÎäî {DiscordConstants.EMOJI_CANCEL} Ïù¥Î™®ÏßÄÎ°ú ÏùëÎãµÌï¥Ï£ºÏÑ∏Ïöî.\n{int(DiscordConstants.TRADE_CONFIRMATION_TIMEOUT_SECONDS)}Ï¥à ÎÇ¥Ïóê ÏùëÎãµÌïòÏßÄ ÏïäÏúºÎ©¥ Ï∑®ÏÜåÎê©ÎãàÎã§.",
        inline=False,
    )

    return embed


def _create_buy_commands(order_usecase: OrderUseCase) -> list[Any]:
    """Îß§Ïàò Ïª§Îß®ÎìúÎì§ ÏÉùÏÑ±"""

    @commands.command(name="Îß§Ïàò", aliases=["buy"])
    async def buy_command(
        ctx: commands.Context[Any],
        market: MarketName,
        amount: str,
        price: str | None = None,
    ) -> None:
        """
        ÏïîÌò∏ÌôîÌèê Îß§Ïàò Ï£ºÎ¨∏ÏùÑ Ïã§ÌñâÌï©ÎãàÎã§.

        ÏÇ¨Ïö©Î≤ï:
        !Îß§Ïàò [ÎßàÏºì] [Í∏àÏï°] - ÏãúÏû•Í∞Ä Îß§Ïàò
        !Îß§Ïàò [ÎßàÏºì] [ÏàòÎüâ] [Í∞ÄÍ≤©] - ÏßÄÏ†ïÍ∞Ä Îß§Ïàò

        ÏòàÏãú:
        !Îß§Ïàò KRW-BTC 100000 - 10ÎßåÏõêÏñ¥Ïπò BTC ÏãúÏû•Í∞Ä Îß§Ïàò
        !Îß§Ïàò KRW-BTC 0.001 95000000 - 0.001 BTCÎ•º 9500ÎßåÏõêÏóê ÏßÄÏ†ïÍ∞Ä Îß§Ïàò
        """
        # Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÌôïÏù∏
        if not _is_admin(ctx.author.id):
            await ctx.send(
                f"{DiscordConstants.EMOJI_ERROR} Í±∞Îûò Î™ÖÎ†πÏùÄ Í¥ÄÎ¶¨ÏûêÎßå ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§."
            )
            return

        try:
            market = market.upper()

            if price is None:
                # ÏãúÏû•Í∞Ä Îß§Ïàò
                amount_decimal = Decimal(amount)

                # Í∏àÏï° Ï†úÌïú ÌôïÏù∏
                if amount_decimal > DiscordConstants.MAX_TRADE_AMOUNT_KRW:
                    await ctx.send(
                        f"{DiscordConstants.EMOJI_ERROR} ÏµúÎåÄ Í±∞Îûò Í∏àÏï°ÏùÄ {DiscordConstants.MAX_TRADE_AMOUNT_KRW:,}ÏõêÏûÖÎãàÎã§."
                    )
                    return

                # ÌôïÏù∏ Îã®Í≥Ñ
                embed = _create_trade_confirmation_embed(
                    "Îß§Ïàò", market, f"{amount_decimal:,.0f} KRW"
                )
                message = await ctx.send(embed=embed)
                await message.add_reaction(DiscordConstants.EMOJI_CONFIRM)
                await message.add_reaction(DiscordConstants.EMOJI_CANCEL)

                def check(reaction: discord.Reaction, user: discord.User) -> bool:
                    return (
                        user == ctx.author
                        and str(reaction.emoji)
                        in [
                            DiscordConstants.EMOJI_CONFIRM,
                            DiscordConstants.EMOJI_CANCEL,
                        ]
                        and reaction.message.id == message.id
                    )

                try:
                    reaction, _ = await ctx.bot.wait_for(
                        "reaction_add",
                        timeout=DiscordConstants.TRADE_CONFIRMATION_TIMEOUT_SECONDS,
                        check=check,
                    )

                    if str(reaction.emoji) == DiscordConstants.EMOJI_CONFIRM:
                        await ctx.send(
                            f"{DiscordConstants.EMOJI_PROCESSING} ÏãúÏû•Í∞Ä Îß§Ïàò Ï£ºÎ¨∏ÏùÑ Ïã§ÌñâÏ§ëÏûÖÎãàÎã§..."
                        )
                        result = await order_usecase.buy_market(market, amount_decimal)

                        if not isinstance(result, OrderError):
                            await ctx.send(
                                f"{DiscordConstants.EMOJI_SUCCESS} ÏãúÏû•Í∞Ä Îß§Ïàò Ï£ºÎ¨∏Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ïã§ÌñâÎêòÏóàÏäµÎãàÎã§!\nÏ£ºÎ¨∏ UUID: `{result.order_uuid}`"
                            )
                        else:
                            await ctx.send(
                                f"{DiscordConstants.EMOJI_ERROR} Îß§Ïàò Ï£ºÎ¨∏ Ïã§Ìå®: {result.error_message}"
                            )
                    else:
                        await ctx.send(
                            f"{DiscordConstants.EMOJI_CANCEL} Îß§Ïàò Ï£ºÎ¨∏Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
                        )

                except Exception:
                    await ctx.send(
                        f"{DiscordConstants.EMOJI_TIMEOUT} ÏãúÍ∞Ñ Ï¥àÍ≥ºÎ°ú Îß§Ïàò Ï£ºÎ¨∏Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
                    )

            else:
                # ÏßÄÏ†ïÍ∞Ä Îß§Ïàò
                volume_decimal = Decimal(amount)
                price_decimal = Decimal(price)

                # BTC Í±∞ÎûòÎüâ Ï†úÌïú ÌôïÏù∏ (ÏòàÏãú)
                if (
                    market == "KRW-BTC"
                    and volume_decimal > DiscordConstants.MAX_TRADE_VOLUME_BTC
                ):
                    await ctx.send(
                        f"{DiscordConstants.EMOJI_ERROR} ÏµúÎåÄ BTC Í±∞ÎûòÎüâÏùÄ {DiscordConstants.MAX_TRADE_VOLUME_BTC}Í∞úÏûÖÎãàÎã§."
                    )
                    return

                # Ï¥ù Í±∞Îûò Í∏àÏï° ÌôïÏù∏
                total_amount = volume_decimal * price_decimal
                if total_amount > DiscordConstants.MAX_TRADE_AMOUNT_KRW:
                    await ctx.send(
                        f"{DiscordConstants.EMOJI_ERROR} Ï¥ù Í±∞Îûò Í∏àÏï°Ïù¥ ÏµúÎåÄ ÌïúÎèÑ({DiscordConstants.MAX_TRADE_AMOUNT_KRW:,}Ïõê)Î•º Ï¥àÍ≥ºÌï©ÎãàÎã§."
                    )
                    return

                # ÌôïÏù∏ Îã®Í≥Ñ
                embed = _create_trade_confirmation_embed(
                    "Îß§Ïàò", market, str(volume_decimal), str(price_decimal)
                )
                message = await ctx.send(embed=embed)
                await message.add_reaction(DiscordConstants.EMOJI_CONFIRM)
                await message.add_reaction(DiscordConstants.EMOJI_CANCEL)

                def check(reaction: discord.Reaction, user: discord.User) -> bool:
                    return (
                        user == ctx.author
                        and str(reaction.emoji)
                        in [
                            DiscordConstants.EMOJI_CONFIRM,
                            DiscordConstants.EMOJI_CANCEL,
                        ]
                        and reaction.message.id == message.id
                    )

                try:
                    reaction, _ = await ctx.bot.wait_for(
                        "reaction_add",
                        timeout=DiscordConstants.TRADE_CONFIRMATION_TIMEOUT_SECONDS,
                        check=check,
                    )

                    if str(reaction.emoji) == DiscordConstants.EMOJI_CONFIRM:
                        await ctx.send(
                            f"{DiscordConstants.EMOJI_PROCESSING} ÏßÄÏ†ïÍ∞Ä Îß§Ïàò Ï£ºÎ¨∏ÏùÑ Ïã§ÌñâÏ§ëÏûÖÎãàÎã§..."
                        )
                        limit_result = await order_usecase.buy_limit(
                            market, volume_decimal, price_decimal
                        )

                        if not isinstance(limit_result, OrderError):
                            await ctx.send(
                                f"{DiscordConstants.EMOJI_SUCCESS} ÏßÄÏ†ïÍ∞Ä Îß§Ïàò Ï£ºÎ¨∏Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ïã§ÌñâÎêòÏóàÏäµÎãàÎã§!\nÏ£ºÎ¨∏ UUID: `{limit_result.order_uuid}`"
                            )
                        else:
                            await ctx.send(
                                f"{DiscordConstants.EMOJI_ERROR} Îß§Ïàò Ï£ºÎ¨∏ Ïã§Ìå®: {limit_result.error_message}"
                            )
                    else:
                        await ctx.send(
                            f"{DiscordConstants.EMOJI_CANCEL} Îß§Ïàò Ï£ºÎ¨∏Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
                        )

                except Exception:
                    await ctx.send(
                        f"{DiscordConstants.EMOJI_TIMEOUT} ÏãúÍ∞Ñ Ï¥àÍ≥ºÎ°ú Îß§Ïàò Ï£ºÎ¨∏Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
                    )

        except ValueError:
            await ctx.send(
                f"{DiscordConstants.EMOJI_ERROR} Ïò¨Î∞îÎ•∏ Ïà´Ïûê ÌòïÏãùÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."
            )
        except Exception as e:
            await ctx.send(f"{DiscordConstants.EMOJI_ERROR} Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {e!s}")

    @commands.command(name="Îß§ÎèÑ", aliases=["sell"])
    async def sell_command(
        ctx: commands.Context[Any],
        market: MarketName,
        volume: str,
        price: str | None = None,
    ) -> None:
        """
        ÏïîÌò∏ÌôîÌèê Îß§ÎèÑ Ï£ºÎ¨∏ÏùÑ Ïã§ÌñâÌï©ÎãàÎã§.

        ÏÇ¨Ïö©Î≤ï:
        !Îß§ÎèÑ [ÎßàÏºì] [ÏàòÎüâ] - ÏãúÏû•Í∞Ä Îß§ÎèÑ
        !Îß§ÎèÑ [ÎßàÏºì] [ÏàòÎüâ] [Í∞ÄÍ≤©] - ÏßÄÏ†ïÍ∞Ä Îß§ÎèÑ

        ÏòàÏãú:
        !Îß§ÎèÑ KRW-BTC 0.001 - 0.001 BTC ÏãúÏû•Í∞Ä Îß§ÎèÑ
        !Îß§ÎèÑ KRW-BTC 0.001 95000000 - 0.001 BTCÎ•º 9500ÎßåÏõêÏóê ÏßÄÏ†ïÍ∞Ä Îß§ÎèÑ
        """
        # Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÌôïÏù∏
        if not _is_admin(ctx.author.id):
            await ctx.send(
                f"{DiscordConstants.EMOJI_ERROR} Í±∞Îûò Î™ÖÎ†πÏùÄ Í¥ÄÎ¶¨ÏûêÎßå ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§."
            )
            return

        try:
            market = market.upper()
            volume_decimal = Decimal(volume)

            # BTC Í±∞ÎûòÎüâ Ï†úÌïú ÌôïÏù∏ (ÏòàÏãú)
            if (
                market == "KRW-BTC"
                and volume_decimal > DiscordConstants.MAX_TRADE_VOLUME_BTC
            ):
                await ctx.send(
                    f"{DiscordConstants.EMOJI_ERROR} ÏµúÎåÄ BTC Í±∞ÎûòÎüâÏùÄ {DiscordConstants.MAX_TRADE_VOLUME_BTC}Í∞úÏûÖÎãàÎã§."
                )
                return

            if price is None:
                # ÏãúÏû•Í∞Ä Îß§ÎèÑ
                embed = _create_trade_confirmation_embed(
                    "Îß§ÎèÑ", market, str(volume_decimal)
                )
                message = await ctx.send(embed=embed)
                await message.add_reaction(DiscordConstants.EMOJI_CONFIRM)
                await message.add_reaction(DiscordConstants.EMOJI_CANCEL)

                def check(reaction: discord.Reaction, user: discord.User) -> bool:
                    return (
                        user == ctx.author
                        and str(reaction.emoji)
                        in [
                            DiscordConstants.EMOJI_CONFIRM,
                            DiscordConstants.EMOJI_CANCEL,
                        ]
                        and reaction.message.id == message.id
                    )

                try:
                    reaction, _ = await ctx.bot.wait_for(
                        "reaction_add",
                        timeout=DiscordConstants.TRADE_CONFIRMATION_TIMEOUT_SECONDS,
                        check=check,
                    )

                    if str(reaction.emoji) == DiscordConstants.EMOJI_CONFIRM:
                        await ctx.send(
                            f"{DiscordConstants.EMOJI_PROCESSING} ÏãúÏû•Í∞Ä Îß§ÎèÑ Ï£ºÎ¨∏ÏùÑ Ïã§ÌñâÏ§ëÏûÖÎãàÎã§..."
                        )
                        result = await order_usecase.sell_market(market, volume_decimal)

                        if not isinstance(result, OrderError):
                            await ctx.send(
                                f"{DiscordConstants.EMOJI_SUCCESS} ÏãúÏû•Í∞Ä Îß§ÎèÑ Ï£ºÎ¨∏Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ïã§ÌñâÎêòÏóàÏäµÎãàÎã§!\nÏ£ºÎ¨∏ UUID: `{result.order_uuid}`"
                            )
                        else:
                            await ctx.send(
                                f"{DiscordConstants.EMOJI_ERROR} Îß§ÎèÑ Ï£ºÎ¨∏ Ïã§Ìå®: {result.error_message}"
                            )
                    else:
                        await ctx.send(
                            f"{DiscordConstants.EMOJI_CANCEL} Îß§ÎèÑ Ï£ºÎ¨∏Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
                        )

                except Exception:
                    await ctx.send(
                        f"{DiscordConstants.EMOJI_TIMEOUT} ÏãúÍ∞Ñ Ï¥àÍ≥ºÎ°ú Îß§ÎèÑ Ï£ºÎ¨∏Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
                    )

            else:
                # ÏßÄÏ†ïÍ∞Ä Îß§ÎèÑ
                price_decimal = Decimal(price)

                # ÌôïÏù∏ Îã®Í≥Ñ
                embed = _create_trade_confirmation_embed(
                    "Îß§ÎèÑ", market, str(volume_decimal), str(price_decimal)
                )
                message = await ctx.send(embed=embed)
                await message.add_reaction(DiscordConstants.EMOJI_CONFIRM)
                await message.add_reaction(DiscordConstants.EMOJI_CANCEL)

                def check(reaction: discord.Reaction, user: discord.User) -> bool:
                    return (
                        user == ctx.author
                        and str(reaction.emoji)
                        in [
                            DiscordConstants.EMOJI_CONFIRM,
                            DiscordConstants.EMOJI_CANCEL,
                        ]
                        and reaction.message.id == message.id
                    )

                try:
                    reaction, _ = await ctx.bot.wait_for(
                        "reaction_add",
                        timeout=DiscordConstants.TRADE_CONFIRMATION_TIMEOUT_SECONDS,
                        check=check,
                    )

                    if str(reaction.emoji) == DiscordConstants.EMOJI_CONFIRM:
                        await ctx.send(
                            f"{DiscordConstants.EMOJI_PROCESSING} ÏßÄÏ†ïÍ∞Ä Îß§ÎèÑ Ï£ºÎ¨∏ÏùÑ Ïã§ÌñâÏ§ëÏûÖÎãàÎã§..."
                        )
                        limit_result = await order_usecase.sell_limit(
                            market, volume_decimal, price_decimal
                        )

                        if not isinstance(limit_result, OrderError):
                            await ctx.send(
                                f"{DiscordConstants.EMOJI_SUCCESS} ÏßÄÏ†ïÍ∞Ä Îß§ÎèÑ Ï£ºÎ¨∏Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ïã§ÌñâÎêòÏóàÏäµÎãàÎã§!\nÏ£ºÎ¨∏ UUID: `{limit_result.order_uuid}`"
                            )
                        else:
                            await ctx.send(
                                f"{DiscordConstants.EMOJI_ERROR} Îß§ÎèÑ Ï£ºÎ¨∏ Ïã§Ìå®: {limit_result.error_message}"
                            )
                    else:
                        await ctx.send(
                            f"{DiscordConstants.EMOJI_CANCEL} Îß§ÎèÑ Ï£ºÎ¨∏Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
                        )

                except Exception:
                    await ctx.send(
                        f"{DiscordConstants.EMOJI_TIMEOUT} ÏãúÍ∞Ñ Ï¥àÍ≥ºÎ°ú Îß§ÎèÑ Ï£ºÎ¨∏Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
                    )

        except ValueError:
            await ctx.send(
                f"{DiscordConstants.EMOJI_ERROR} Ïò¨Î∞îÎ•∏ Ïà´Ïûê ÌòïÏãùÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."
            )
        except Exception as e:
            await ctx.send(f"{DiscordConstants.EMOJI_ERROR} Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {e!s}")

    return [buy_command, sell_command]


def _create_order_commands(order_usecase: OrderUseCase) -> list[Any]:
    """Ï£ºÎ¨∏ Í¥ÄÎ¶¨ Ïª§Îß®ÎìúÎì§ ÏÉùÏÑ±"""

    @commands.command(name="Ï£ºÎ¨∏Ï°∞Ìöå", aliases=["order"])
    async def get_order_command(ctx: commands.Context[Any], uuid: str) -> None:
        """
        ÌäπÏ†ï Ï£ºÎ¨∏ Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§.

        ÏÇ¨Ïö©Î≤ï: !Ï£ºÎ¨∏Ï°∞Ìöå [Ï£ºÎ¨∏UUID]
        ÏòàÏãú: !Ï£ºÎ¨∏Ï°∞Ìöå abc123-def456-ghi789
        """
        # Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÌôïÏù∏
        if not _is_admin(ctx.author.id):
            await ctx.send(
                f"{DiscordConstants.EMOJI_ERROR} Ï£ºÎ¨∏ Ï°∞ÌöåÎäî Í¥ÄÎ¶¨ÏûêÎßå ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§."
            )
            return

        try:
            result = await order_usecase.get_order(uuid)

            if isinstance(result, dict) and result.get("success"):
                state_emoji = {
                    "wait": "‚è≥",
                    "watch": "üëÄ",
                    "done": DiscordConstants.EMOJI_SUCCESS,
                    "cancel": DiscordConstants.EMOJI_ERROR,
                }.get(result["state"], "‚ùì")

                side_text = "Îß§Ïàò" if result["side"] == "bid" else "Îß§ÎèÑ"
                ord_type_text = {
                    "limit": "ÏßÄÏ†ïÍ∞Ä",
                    "price": "ÏãúÏû•Í∞Ä Îß§Ïàò",
                    "market": "ÏãúÏû•Í∞Ä Îß§ÎèÑ",
                }.get(result["ord_type"], result["ord_type"])

                message = f"{state_emoji} **Ï£ºÎ¨∏ Ï†ïÎ≥¥**\n\n"
                message += f"**UUID**: `{result['uuid']}`\n"
                message += f"**ÎßàÏºì**: {result['market']}\n"
                message += f"**Ï£ºÎ¨∏ Ïú†Ìòï**: {side_text} ({ord_type_text})\n"
                message += f"**Ï£ºÎ¨∏ ÏÉÅÌÉú**: {result['state']}\n"

                if result["price"]:
                    message += f"**Ï£ºÎ¨∏ Í∞ÄÍ≤©**: {float(result['price']):,.0f} KRW\n"
                if result["volume"]:
                    message += f"**Ï£ºÎ¨∏ ÏàòÎüâ**: {result['volume']}\n"

                message += f"**ÎØ∏Ï≤¥Í≤∞ ÏàòÎüâ**: {result['remaining_volume']}\n"
                message += f"**Ï≤¥Í≤∞ ÏàòÎüâ**: {result['executed_volume']}\n"
                message += f"**Ï£ºÎ¨∏ ÏãúÍ∞Ñ**: {result['created_at']}\n"

                await ctx.send(message)
            else:
                error_msg = (
                    result.error_message
                    if isinstance(result, OrderError)
                    else "Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò"
                )
                await ctx.send(
                    f"{DiscordConstants.EMOJI_ERROR} Ï£ºÎ¨∏ Ï°∞Ìöå Ïã§Ìå®: {error_msg}"
                )

        except Exception as e:
            await ctx.send(f"{DiscordConstants.EMOJI_ERROR} Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {e!s}")

    @commands.command(name="Ï£ºÎ¨∏Ï∑®ÏÜå", aliases=["cancel"])
    async def cancel_order_command(ctx: commands.Context[Any], uuid: str) -> None:
        """
        Ï£ºÎ¨∏ÏùÑ Ï∑®ÏÜåÌï©ÎãàÎã§.

        ÏÇ¨Ïö©Î≤ï: !Ï£ºÎ¨∏Ï∑®ÏÜå [Ï£ºÎ¨∏UUID]
        ÏòàÏãú: !Ï£ºÎ¨∏Ï∑®ÏÜå abc123-def456-ghi789
        """
        # Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÌôïÏù∏
        if not _is_admin(ctx.author.id):
            await ctx.send(
                f"{DiscordConstants.EMOJI_ERROR} Ï£ºÎ¨∏ Ï∑®ÏÜåÎäî Í¥ÄÎ¶¨ÏûêÎßå ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§."
            )
            return

        try:
            # ÌôïÏù∏ Îã®Í≥Ñ
            embed = discord.Embed(
                title="üóëÔ∏è Ï£ºÎ¨∏ Ï∑®ÏÜå ÌôïÏù∏",
                description=f"Ï£ºÎ¨∏ UUID `{uuid}`Î•º Ï∑®ÏÜåÌïòÏãúÍ≤†ÏäµÎãàÍπå?",
                color=DiscordConstants.COLOR_ERROR,
            )
            embed.add_field(
                name=f"{DiscordConstants.EMOJI_WARNING} Ï£ºÏùòÏÇ¨Ìï≠",
                value=f"{DiscordConstants.EMOJI_CONFIRM} ÎòêÎäî {DiscordConstants.EMOJI_CANCEL} Ïù¥Î™®ÏßÄÎ°ú ÏùëÎãµÌï¥Ï£ºÏÑ∏Ïöî.\n{int(DiscordConstants.TRADE_CONFIRMATION_TIMEOUT_SECONDS)}Ï¥à ÎÇ¥Ïóê ÏùëÎãµÌïòÏßÄ ÏïäÏúºÎ©¥ Ï∑®ÏÜåÎê©ÎãàÎã§.",
                inline=False,
            )

            message = await ctx.send(embed=embed)
            await message.add_reaction(DiscordConstants.EMOJI_CONFIRM)
            await message.add_reaction(DiscordConstants.EMOJI_CANCEL)

            def check(reaction: discord.Reaction, user: discord.User) -> bool:
                return (
                    user == ctx.author
                    and str(reaction.emoji)
                    in [DiscordConstants.EMOJI_CONFIRM, DiscordConstants.EMOJI_CANCEL]
                    and reaction.message.id == message.id
                )

            try:
                reaction, _ = await ctx.bot.wait_for(
                    "reaction_add",
                    timeout=DiscordConstants.TRADE_CONFIRMATION_TIMEOUT_SECONDS,
                    check=check,
                )

                if str(reaction.emoji) == DiscordConstants.EMOJI_CONFIRM:
                    await ctx.send(
                        f"{DiscordConstants.EMOJI_PROCESSING} Ï£ºÎ¨∏ÏùÑ Ï∑®ÏÜåÌïòÎäî Ï§ëÏûÖÎãàÎã§..."
                    )
                    result = await order_usecase.cancel_order(uuid)

                    if isinstance(result, dict) and result.get("success"):
                        await ctx.send(
                            f"{DiscordConstants.EMOJI_SUCCESS} Ï£ºÎ¨∏Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§!\nÏ£ºÎ¨∏ UUID: `{result['uuid']}`"
                        )
                    else:
                        error_msg = (
                            result.error_message
                            if isinstance(result, OrderError)
                            else "Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò"
                        )
                        await ctx.send(
                            f"{DiscordConstants.EMOJI_ERROR} Ï£ºÎ¨∏ Ï∑®ÏÜå Ïã§Ìå®: {error_msg}"
                        )
                else:
                    await ctx.send(
                        f"{DiscordConstants.EMOJI_CANCEL} Ï£ºÎ¨∏ Ï∑®ÏÜåÍ∞Ä Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
                    )

            except Exception:
                await ctx.send(
                    f"{DiscordConstants.EMOJI_TIMEOUT} ÏãúÍ∞Ñ Ï¥àÍ≥ºÎ°ú Ï£ºÎ¨∏ Ï∑®ÏÜåÍ∞Ä Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
                )

        except Exception as e:
            await ctx.send(f"{DiscordConstants.EMOJI_ERROR} Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {e!s}")

    return [get_order_command, cancel_order_command]


def _format_currency_amount(amount: float, currency: str) -> str:
    """ÌÜµÌôî ÌÉÄÏûÖÏóê Îî∞Îùº Ï†ÅÏ†àÌïú Ìè¨Îß∑ÏúºÎ°ú Ïà´ÏûêÎ•º ÌëúÏãú"""
    if currency == "KRW":
        # KRWÎäî Ï†ïÏàòÎ°ú ÌëúÏãú (ÏÜåÏàòÏ†ê Î∂àÌïÑÏöî)
        return f"{int(amount):,}"
    else:
        # ÏïîÌò∏ÌôîÌèêÎäî 8ÏûêÎ¶¨ ÏÜåÏàòÏ†êÍπåÏßÄ ÌëúÏãúÌïòÎêò, Î∂àÌïÑÏöîÌïú 0 Ï†úÍ±∞
        formatted = f"{amount:.8f}".rstrip("0").rstrip(".")
        # Ï≤ú Îã®ÏúÑ Íµ¨Î∂ÑÏûê Ï∂îÍ∞Ä (Ï†ïÏàò Î∂ÄÎ∂ÑÏóêÎßå)
        parts = formatted.split(".")
        decimal_parts_count = 2  # integer_part, decimal_part
        if len(parts) == decimal_parts_count:
            integer_part = f"{int(parts[0]):,}"
            return f"{integer_part}.{parts[1]}"
        else:
            return f"{int(amount):,}"


def _create_balance_command(account_usecase: AccountUseCase) -> Any:
    """ÏûîÍ≥† Ï°∞Ìöå Ïª§Îß®Îìú ÏÉùÏÑ±"""

    @commands.command(name="ÏûîÍ≥†", aliases=["balance", "Í≥ÑÏ¢å"])
    async def check_balance(ctx: commands.Context[Any]) -> None:
        """Í≥ÑÏ¢å ÏûîÍ≥†Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
        ÏÇ¨Ïö©Î≤ï: !ÏûîÍ≥†
        """
        try:
            result = await account_usecase.get_balance()

            if result.balances:
                message = "üí∞ **Í≥ÑÏ¢å ÏûîÍ≥†**\n"

                for balance in result.balances:
                    balance_val = float(balance.balance)
                    locked_val = float(balance.locked)

                    if balance_val > 0 or locked_val > 0:
                        total = balance_val + locked_val
                        currency = balance.currency

                        message += f"\n**{currency}**\n"
                        message += f"  ‚Ä¢ ÏÇ¨Ïö© Í∞ÄÎä•: {_format_currency_amount(balance_val, currency)}\n"
                        message += f"  ‚Ä¢ Í±∞Îûò Ï§ë: {_format_currency_amount(locked_val, currency)}\n"
                        message += (
                            f"  ‚Ä¢ Ï¥ù Î≥¥Ïú†: {_format_currency_amount(total, currency)}\n"
                        )

                        avg_buy_price = float(balance.avg_buy_price)
                        if avg_buy_price > 0:
                            message += f"  ‚Ä¢ ÌèâÍ∑† Îß§ÏàòÍ∞Ä: {_format_currency_amount(avg_buy_price, 'KRW')} KRW\n"

                message += (
                    f"\nüíµ **Ï¥ù ÌèâÍ∞Ä Í∏àÏï°**: {float(result.total_balance_krw):,.0f} KRW"
                )
                await ctx.send(message)
            else:
                await ctx.send("‚ùå Í≥ÑÏ¢å Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.")

        except Exception as e:
            await ctx.send(f"‚ùå Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {e!s}")

    return check_balance


def _create_price_command(ticker_usecase: TickerUseCase) -> Any:
    """ÏãúÏÑ∏ Ï°∞Ìöå Ïª§Îß®Îìú ÏÉùÏÑ±"""

    @commands.command(name="ÏãúÏÑ∏", aliases=["price", "Í∞ÄÍ≤©"])
    async def check_price(
        ctx: commands.Context[Any], market: MarketName = "KRW-BTC"
    ) -> None:
        """ÏïîÌò∏ÌôîÌèê ÏãúÏÑ∏Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
        ÏÇ¨Ïö©Î≤ï: !ÏãúÏÑ∏ [ÎßàÏºìÏΩîÎìú]
        ÏòàÏãú: !ÏãúÏÑ∏ KRW-BTC
        """
        try:
            # ÎßàÏºì ÏΩîÎìú ÎåÄÎ¨∏ÏûêÎ°ú Î≥ÄÌôò
            market = market.upper()

            ticker = await ticker_usecase.get_ticker_price(market)

            if ticker:
                # Í∞ÄÍ≤© Î≥ÄÎèôÎ•† Í≥ÑÏÇ∞
                change_rate = float(ticker.signed_change_rate) * 100
                change_emoji = "üìà" if change_rate >= 0 else "üìâ"
                change_color = "üü¢" if change_rate >= 0 else "üî¥"

                message = f"{change_emoji} **{market} ÏãúÏÑ∏ Ï†ïÎ≥¥**\n\n"
                message += f"**ÌòÑÏû¨Í∞Ä**: {float(ticker.trade_price):,.0f} KRW\n"
                message += f"**Ï†ÑÏùº ÎåÄÎπÑ**: {change_color} {float(ticker.signed_change_price):+,.0f} ({int(change_rate):+}%)\n"
                message += f"**Í≥†Í∞Ä**: {float(ticker.high_price):,.0f} KRW\n"
                message += f"**Ï†ÄÍ∞Ä**: {float(ticker.low_price):,.0f} KRW\n"
                message += f"**Í±∞ÎûòÎüâ**: {int(float(ticker.acc_trade_volume_24h))}\n"
                message += f"**Í±∞ÎûòÎåÄÍ∏à**: {float(ticker.acc_trade_price_24h):,.0f} KRW"

                await ctx.send(message)
            else:
                await ctx.send(f"‚ùå {market} ÏãúÏÑ∏ Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.")

        except Exception as e:
            await ctx.send(f"‚ùå Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {e!s}")

    return check_price


def _create_infinite_buying_commands(
    infinite_buying_usecase: InfiniteBuyingUsecase,
) -> list[Any]:
    """Î¨¥ÌïúÎß§ÏàòÎ≤ï Ïª§Îß®ÎìúÎì§ ÏÉùÏÑ±"""

    @commands.command(name="Î¨¥ÌïúÎß§ÏàòÏãúÏûë", aliases=["infinite_start", "Î¨¥ÌïúÏãúÏûë"])
    async def start_infinite_buying_command(
        ctx: commands.Context[Any],
        market: MarketName,
        initial_amount: str,
        target_profit: str = "10",
        drop_threshold: str = "5",
        max_rounds: str = "10",
    ) -> None:
        """
        Î¨¥ÌïúÎß§ÏàòÎ≤ïÏùÑ ÏãúÏûëÌï©ÎãàÎã§.

        ÏÇ¨Ïö©Î≤ï:
        !Î¨¥ÌïúÎß§ÏàòÏãúÏûë [ÎßàÏºì] [Ï¥àÍ∏∞Í∏àÏï°] [Î™©ÌëúÏàòÏùµÎ•†] [ÌïòÎùΩÍ∏∞Ï§Ä] [ÏµúÎåÄÌöåÏ∞®]

        ÏòàÏãú:
        !Î¨¥ÌïúÎß§ÏàòÏãúÏûë KRW-BTC 100000 - 10ÎßåÏõêÏúºÎ°ú BTC Î¨¥ÌïúÎß§ÏàòÎ≤ï ÏãúÏûë
        !Î¨¥ÌïúÎß§ÏàòÏãúÏûë KRW-BTC 100000 15 3 15 - Î™©ÌëúÏàòÏùµÎ•† 15%, ÌïòÎùΩÍ∏∞Ï§Ä 3%, ÏµúÎåÄ 15ÌöåÏ∞®
        """
        # Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÌôïÏù∏
        if not _is_admin(ctx.author.id):
            await ctx.send(
                f"{DiscordConstants.EMOJI_ERROR} Î¨¥ÌïúÎß§ÏàòÎ≤ïÏùÄ Í¥ÄÎ¶¨ÏûêÎßå ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§."
            )
            return

        try:
            market = market.upper()
            initial_buy_amount = Decimal(initial_amount)
            target_profit_rate = Decimal(target_profit) / Decimal("100")  # % to decimal
            price_drop_threshold = -Decimal(drop_threshold) / Decimal(
                "100"
            )  # % to negative decimal
            max_buy_rounds = int(max_rounds)

            # ÌååÎùºÎØ∏ÌÑ∞ Í≤ÄÏ¶ù
            if initial_buy_amount < MIN_INITIAL_BUY_AMOUNT:
                await ctx.send(
                    f"{DiscordConstants.EMOJI_ERROR} ÏµúÏÜå Ï¥àÍ∏∞ Îß§Ïàò Í∏àÏï°ÏùÄ {MIN_INITIAL_BUY_AMOUNT:,}ÏõêÏûÖÎãàÎã§."
                )
                return

            if initial_buy_amount > MAX_TRADE_AMOUNT_KRW:
                await ctx.send(
                    f"{DiscordConstants.EMOJI_ERROR} ÏµúÎåÄ Ï¥àÍ∏∞ Îß§Ïàò Í∏àÏï°ÏùÄ {MAX_TRADE_AMOUNT_KRW:,}ÏõêÏûÖÎãàÎã§."
                )
                return

            if target_profit_rate <= 0 or target_profit_rate > 1:
                await ctx.send(
                    f"{DiscordConstants.EMOJI_ERROR} Î™©Ìëú ÏàòÏùµÎ•†ÏùÄ 0Î≥¥Îã§ ÌÅ¨Í≥† 100% Ïù¥ÌïòÏó¨Ïïº Ìï©ÎãàÎã§."
                )
                return

            if (
                price_drop_threshold >= 0
                or price_drop_threshold < MIN_PRICE_DROP_THRESHOLD
            ):
                await ctx.send(
                    f"{DiscordConstants.EMOJI_ERROR} ÌïòÎùΩ Í∏∞Ï§ÄÏùÄ 0Î≥¥Îã§ ÏûëÍ≥† {abs(MIN_PRICE_DROP_THRESHOLD):.0%} Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§."
                )
                return

            # ÌôïÏù∏ Î©îÏãúÏßÄ
            embed = discord.Embed(
                title="üîÑ Î¨¥ÌïúÎß§ÏàòÎ≤ï ÏãúÏûë ÌôïÏù∏",
                description=f"**{market}** Î¨¥ÌïúÎß§ÏàòÎ≤ïÏùÑ ÏãúÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå?",
                color=DiscordConstants.COLOR_WARNING,
            )

            embed.add_field(
                name="Ï¥àÍ∏∞ Îß§Ïàò Í∏àÏï°",
                value=f"{initial_buy_amount:,.0f} Ïõê",
                inline=True,
            )
            embed.add_field(
                name="Î™©Ìëú ÏàòÏùµÎ•†", value=f"{target_profit_rate:.1%}", inline=True
            )
            embed.add_field(
                name="Ï∂îÍ∞Ä Îß§Ïàò Í∏∞Ï§Ä",
                value=f"{abs(price_drop_threshold):.1%} ÌïòÎùΩ",
                inline=True,
            )
            embed.add_field(
                name="ÏµúÎåÄ Îß§Ïàò ÌöåÏ∞®", value=f"{max_buy_rounds}Ìöå", inline=True
            )
            embed.add_field(name="Í±∞Îûò Î™®Îìú", value="Ïã§Í±∞Îûò", inline=True)

            embed.add_field(
                name=f"{DiscordConstants.EMOJI_WARNING} Ï£ºÏùòÏÇ¨Ìï≠",
                value=f"{DiscordConstants.EMOJI_CONFIRM} ÎòêÎäî {DiscordConstants.EMOJI_CANCEL} Ïù¥Î™®ÏßÄÎ°ú ÏùëÎãµÌï¥Ï£ºÏÑ∏Ïöî.\n10Ï¥à ÎÇ¥Ïóê ÏùëÎãµÌïòÏßÄ ÏïäÏúºÎ©¥ Ï∑®ÏÜåÎê©ÎãàÎã§.",
                inline=False,
            )

            message = await ctx.send(embed=embed)
            await message.add_reaction(DiscordConstants.EMOJI_CONFIRM)
            await message.add_reaction(DiscordConstants.EMOJI_CANCEL)

            def check(reaction: discord.Reaction, user: discord.User) -> bool:
                return (
                    user == ctx.author
                    and str(reaction.emoji)
                    in [DiscordConstants.EMOJI_CONFIRM, DiscordConstants.EMOJI_CANCEL]
                    and reaction.message.id == message.id
                )

            try:
                reaction, _ = await ctx.bot.wait_for(
                    "reaction_add", timeout=10.0, check=check
                )

                if str(reaction.emoji) == DiscordConstants.EMOJI_CONFIRM:
                    await ctx.send(
                        f"{DiscordConstants.EMOJI_PROCESSING} Î¨¥ÌïúÎß§ÏàòÎ≤ïÏùÑ ÏãúÏûëÌïòÎäî Ï§ë..."
                    )

                    try:
                        result = await infinite_buying_usecase.start_infinite_buying(
                            market=market,
                            initial_buy_amount=initial_buy_amount,
                            target_profit_rate=target_profit_rate,
                            price_drop_threshold=price_drop_threshold,
                            max_buy_rounds=max_buy_rounds,
                        )

                        if result.success:
                            await ctx.send(
                                f"{DiscordConstants.EMOJI_SUCCESS} {result.message}\n"
                                f"ÏÇ¨Ïù¥ÌÅ¥ ID: `{result.current_state.cycle_id if result.current_state else 'N/A'}`"
                            )
                        else:
                            await ctx.send(
                                f"{DiscordConstants.EMOJI_ERROR} {result.message}"
                            )

                    except RuntimeError as e:
                        await ctx.send(
                            f"{DiscordConstants.EMOJI_ERROR} ÏÑ§Ï†ï Ï†ÄÏû• Ïã§Ìå®: {e!s}"
                        )
                    except ConnectionError as e:
                        await ctx.send(
                            f"{DiscordConstants.EMOJI_ERROR} ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ Ïò§Î•ò: {e!s}"
                        )
                    except Exception as e:
                        await ctx.send(
                            f"{DiscordConstants.EMOJI_ERROR} ÏãúÏä§ÌÖú Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {e!s}"
                        )

                else:
                    await ctx.send(
                        f"{DiscordConstants.EMOJI_CANCEL} Î¨¥ÌïúÎß§ÏàòÎ≤ï ÏãúÏûëÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
                    )

            except Exception:
                await ctx.send(
                    f"{DiscordConstants.EMOJI_TIMEOUT} ÏãúÍ∞Ñ Ï¥àÍ≥ºÎ°ú Î¨¥ÌïúÎß§ÏàòÎ≤ï ÏãúÏûëÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
                )

        except ValueError as e:
            await ctx.send(f"{DiscordConstants.EMOJI_ERROR} ÏûòÎ™ªÎêú ÏûÖÎ†•Í∞íÏûÖÎãàÎã§: {e!s}")
        except Exception as e:
            await ctx.send(f"{DiscordConstants.EMOJI_ERROR} Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {e!s}")

    @commands.command(name="Î¨¥ÌïúÎß§ÏàòÏ°∞Ìöå", aliases=["infinite_status", "Î¨¥ÌïúÏ°∞Ìöå"])
    async def check_infinite_buying_status_command(
        ctx: commands.Context[Any], market: MarketName | None = None
    ) -> None:
        """
        Î¨¥ÌïúÎß§ÏàòÎ≤ï ÏÉÅÌÉúÎ•º Ï°∞ÌöåÌï©ÎãàÎã§.

        ÏÇ¨Ïö©Î≤ï:
        !Î¨¥ÌïúÎß§ÏàòÏ°∞Ìöå - Ï†ÑÏ≤¥ ÏÉÅÌÉú Ï°∞Ìöå
        !Î¨¥ÌïúÎß§ÏàòÏ°∞Ìöå [ÎßàÏºì] - ÌäπÏ†ï ÎßàÏºì ÏÉÅÌÉú Ï°∞Ìöå

        ÏòàÏãú:
        !Î¨¥ÌïúÎß§ÏàòÏ°∞Ìöå KRW-BTC
        """
        try:
            if market:
                market = market.upper()
                # ÌäπÏ†ï ÎßàÏºì ÏÉÅÌÉú Ï°∞Ìöå
                market_status = (
                    await infinite_buying_usecase.get_infinite_buying_market_status(
                        market
                    )
                )

                if market_status.status == InfiniteBuyingStatus.INACTIVE:
                    await ctx.send(f"üì¥ **{market}** Î¨¥ÌïúÎß§ÏàòÎ≤ïÏù¥ Ïã§Ìñâ Ï§ëÏù¥ ÏïÑÎãôÎãàÎã§.")
                    return

                embed = discord.Embed(
                    title=f"üîÑ {market} Î¨¥ÌïúÎß§ÏàòÎ≤ï ÏÉÅÌÉú",
                    color=DiscordConstants.COLOR_INFO,
                )

                embed.add_field(name="ÏÉÅÌÉú", value=market_status.phase, inline=True)
                embed.add_field(
                    name="ÌòÑÏû¨ ÌöåÏ∞®",
                    value=f"{market_status.current_round}Ìöå",
                    inline=True,
                )
                embed.add_field(
                    name="ÏÇ¨Ïù¥ÌÅ¥ ID", value=market_status.cycle_id or "N/A", inline=True
                )

                embed.add_field(
                    name="Ï¥ù Ìà¨ÏûêÏï°",
                    value=f"{market_status.total_investment:,.0f} Ïõê",
                    inline=True,
                )
                embed.add_field(
                    name="ÌèâÍ∑† Îã®Í∞Ä",
                    value=f"{market_status.average_price:,.0f} Ïõê",
                    inline=True,
                )
                embed.add_field(
                    name="Î™©Ìëú Í∞ÄÍ≤©",
                    value=f"{market_status.target_sell_price:,.0f} Ïõê",
                    inline=True,
                )

                # Îß§Ïàò ÌûàÏä§ÌÜ†Î¶¨
                if market_status.buying_rounds:
                    history_text = ""
                    for round_info in market_status.buying_rounds[
                        -5:
                    ]:  # ÏµúÍ∑º 5Í∞úÎßå ÌëúÏãú
                        history_text += f"{round_info.round_number}Ìöå: {round_info.buy_price:,.0f}Ïõê ({round_info.buy_amount:,.0f}Ïõê)\n"

                    embed.add_field(
                        name="ÏµúÍ∑º Îß§Ïàò ÌûàÏä§ÌÜ†Î¶¨",
                        value=history_text if history_text else "ÏóÜÏùå",
                        inline=False,
                    )

                await ctx.send(embed=embed)
            else:
                # Ï†ÑÏ≤¥ ÏÉÅÌÉú Ï°∞Ìöå
                overall_status = (
                    await infinite_buying_usecase.get_infinite_buying_overall_status()
                )

                if overall_status.total_active_markets == 0:
                    await ctx.send("üì¥ ÌòÑÏû¨ Ïã§Ìñâ Ï§ëÏù∏ Î¨¥ÌïúÎß§ÏàòÎ≤ïÏù¥ ÏóÜÏäµÎãàÎã§.")
                    return

                message = "üîÑ **Î¨¥ÌïúÎß§ÏàòÎ≤ï Ï†ÑÏ≤¥ ÏÉÅÌÉú**\n\n"
                message += f"**ÌôúÏÑ± ÏãúÏû•**: {overall_status.total_active_markets}Í∞ú\n"
                message += (
                    f"**ÏãúÏû• Î™©Î°ù**: {', '.join(overall_status.active_markets)}\n\n"
                )
                message += "ÏûêÏÑ∏Ìïú Ï†ïÎ≥¥Î•º Î≥¥Î†§Î©¥ `!Î¨¥ÌïúÎß§ÏàòÏ°∞Ìöå [ÎßàÏºì]`ÏùÑ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî."

                await ctx.send(message)

        except ConnectionError as e:
            await ctx.send(f"{DiscordConstants.EMOJI_ERROR} ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ Ïò§Î•ò: {e!s}")
        except Exception as e:
            await ctx.send(f"{DiscordConstants.EMOJI_ERROR} Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {e!s}")

    @commands.command(name="Î¨¥ÌïúÎß§ÏàòÏ¢ÖÎ£å", aliases=["infinite_stop", "Î¨¥ÌïúÏ¢ÖÎ£å"])
    async def stop_infinite_buying_command(
        ctx: commands.Context[Any], market: MarketName, force_sell: str = "false"
    ) -> None:
        """
        Î¨¥ÌïúÎß§ÏàòÎ≤ïÏùÑ Ï¢ÖÎ£åÌï©ÎãàÎã§.

        ÏÇ¨Ïö©Î≤ï:
        !Î¨¥ÌïúÎß§ÏàòÏ¢ÖÎ£å [ÎßàÏºì] [Í∞ïÏ†úÎß§ÎèÑ]

        ÏòàÏãú:
        !Î¨¥ÌïúÎß§ÏàòÏ¢ÖÎ£å KRW-BTC - Ï†ïÏÉÅ Ï¢ÖÎ£å
        !Î¨¥ÌïúÎß§ÏàòÏ¢ÖÎ£å KRW-BTC true - Í∞ïÏ†ú Îß§ÎèÑ ÌõÑ Ï¢ÖÎ£å
        """
        # Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÌôïÏù∏
        if not _is_admin(ctx.author.id):
            await ctx.send(
                f"{DiscordConstants.EMOJI_ERROR} Î¨¥ÌïúÎß§ÏàòÎ≤ï Ï¢ÖÎ£åÎäî Í¥ÄÎ¶¨ÏûêÎßå ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§."
            )
            return

        try:
            market = market.upper()
            force_sell_flag = force_sell.lower() in ["true", "1", "yes", "Í∞ïÏ†ú"]

            # ÌòÑÏû¨ ÏÉÅÌÉú ÌôïÏù∏
            if not await infinite_buying_usecase.is_market_active(market):
                await ctx.send(f"üì¥ **{market}** Î¨¥ÌïúÎß§ÏàòÎ≤ïÏù¥ Ïã§Ìñâ Ï§ëÏù¥ ÏïÑÎãôÎãàÎã§.")
                return

            # ÌôïÏù∏ Î©îÏãúÏßÄ
            action_text = "Í∞ïÏ†ú Ï¢ÖÎ£å (Ï†ÑÎüâ Îß§ÎèÑ)" if force_sell_flag else "Ï†ïÏÉÅ Ï¢ÖÎ£å"
            embed = discord.Embed(
                title="‚ö†Ô∏è Î¨¥ÌïúÎß§ÏàòÎ≤ï Ï¢ÖÎ£å ÌôïÏù∏",
                description=f"**{market}** Î¨¥ÌïúÎß§ÏàòÎ≤ïÏùÑ {action_text}ÌïòÏãúÍ≤†ÏäµÎãàÍπå?",
                color=DiscordConstants.COLOR_WARNING,
            )

            if force_sell_flag:
                embed.add_field(
                    name="‚ö†Ô∏è Í∞ïÏ†ú Îß§ÎèÑ Ï£ºÏùòÏÇ¨Ìï≠",
                    value="ÌòÑÏû¨ Î≥¥Ïú†Ìïú Î™®Îì† ÏàòÎüâÏùÑ Ï¶âÏãú ÏãúÏû•Í∞ÄÎ°ú Îß§ÎèÑÌï©ÎãàÎã§.\nÏÜêÏã§Ïù¥ Î∞úÏÉùÌï† Ïàò ÏûàÏäµÎãàÎã§.",
                    inline=False,
                )

            embed.add_field(
                name=f"{DiscordConstants.EMOJI_WARNING} Ï£ºÏùòÏÇ¨Ìï≠",
                value=f"{DiscordConstants.EMOJI_CONFIRM} ÎòêÎäî {DiscordConstants.EMOJI_CANCEL} Ïù¥Î™®ÏßÄÎ°ú ÏùëÎãµÌï¥Ï£ºÏÑ∏Ïöî.\n10Ï¥à ÎÇ¥Ïóê ÏùëÎãµÌïòÏßÄ ÏïäÏúºÎ©¥ Ï∑®ÏÜåÎê©ÎãàÎã§.",
                inline=False,
            )

            message = await ctx.send(embed=embed)
            await message.add_reaction(DiscordConstants.EMOJI_CONFIRM)
            await message.add_reaction(DiscordConstants.EMOJI_CANCEL)

            def check(reaction: discord.Reaction, user: discord.User) -> bool:
                return (
                    user == ctx.author
                    and str(reaction.emoji)
                    in [DiscordConstants.EMOJI_CONFIRM, DiscordConstants.EMOJI_CANCEL]
                    and reaction.message.id == message.id
                )

            try:
                reaction, _ = await ctx.bot.wait_for(
                    "reaction_add", timeout=10.0, check=check
                )

                if str(reaction.emoji) == DiscordConstants.EMOJI_CONFIRM:
                    await ctx.send(
                        f"{DiscordConstants.EMOJI_PROCESSING} Î¨¥ÌïúÎß§ÏàòÎ≤ïÏùÑ Ï¢ÖÎ£åÌïòÎäî Ï§ë..."
                    )

                    try:
                        result = await infinite_buying_usecase.stop_infinite_buying(
                            market=market, force_sell=force_sell_flag
                        )

                        if result.success:
                            await ctx.send(
                                f"{DiscordConstants.EMOJI_SUCCESS} {result.message}"
                            )
                        else:
                            await ctx.send(
                                f"{DiscordConstants.EMOJI_ERROR} {result.message}"
                            )

                    except ConnectionError as e:
                        await ctx.send(
                            f"{DiscordConstants.EMOJI_ERROR} ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ Ïò§Î•ò: {e!s}"
                        )
                    except Exception as e:
                        await ctx.send(
                            f"{DiscordConstants.EMOJI_ERROR} ÏãúÏä§ÌÖú Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {e!s}"
                        )

                else:
                    await ctx.send(
                        f"{DiscordConstants.EMOJI_CANCEL} Î¨¥ÌïúÎß§ÏàòÎ≤ï Ï¢ÖÎ£åÍ∞Ä Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
                    )

            except Exception:
                await ctx.send(
                    f"{DiscordConstants.EMOJI_TIMEOUT} ÏãúÍ∞Ñ Ï¥àÍ≥ºÎ°ú Î¨¥ÌïúÎß§ÏàòÎ≤ï Ï¢ÖÎ£åÍ∞Ä Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
                )

        except Exception as e:
            await ctx.send(f"{DiscordConstants.EMOJI_ERROR} Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {e!s}")

    return [
        start_infinite_buying_command,
        check_infinite_buying_status_command,
        stop_infinite_buying_command,
    ]


def _create_help_command() -> Any:
    """ÎèÑÏõÄÎßê Ïª§Îß®Îìú ÏÉùÏÑ±"""

    @commands.command(name="ÎèÑÏõÄÎßê", aliases=["Î™ÖÎ†πÏñ¥"])
    async def help_command(ctx: commands.Context[Any]) -> None:
        """ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î™ÖÎ†πÏñ¥Î•º ÌëúÏãúÌï©ÎãàÎã§."""
        message = "üìö **TTM Trading Bot Î™ÖÎ†πÏñ¥**\n\n"

        # Í∏∞Î≥∏ Î™ÖÎ†πÏñ¥
        message += "**üìä Ï°∞Ìöå Î™ÖÎ†πÏñ¥**\n"
        message += "**!ÏûîÍ≥†** - Í≥ÑÏ¢å ÏûîÍ≥†Î•º Ï°∞ÌöåÌï©ÎãàÎã§\n"
        message += "**!ÏãúÏÑ∏ [ÎßàÏºìÏΩîÎìú]** - ÏïîÌò∏ÌôîÌèê ÏãúÏÑ∏Î•º Ï°∞ÌöåÌï©ÎãàÎã§\n"
        message += "  ÏòàÏãú: `!ÏãúÏÑ∏ KRW-BTC`, `!ÏãúÏÑ∏ KRW-ETH`\n\n"

        # Í±∞Îûò Î™ÖÎ†πÏñ¥ (Í¥ÄÎ¶¨ÏûêÎßå)
        if _is_admin(ctx.author.id):
            message += "**üí∞ Í±∞Îûò Î™ÖÎ†πÏñ¥ (Í¥ÄÎ¶¨Ïûê Ï†ÑÏö©)**\n"
            message += "**!Îß§Ïàò [ÎßàÏºì] [Í∏àÏï°]** - ÏãúÏû•Í∞Ä Îß§Ïàò\n"
            message += "**!Îß§Ïàò [ÎßàÏºì] [ÏàòÎüâ] [Í∞ÄÍ≤©]** - ÏßÄÏ†ïÍ∞Ä Îß§Ïàò\n"
            message += "**!Îß§ÎèÑ [ÎßàÏºì] [ÏàòÎüâ]** - ÏãúÏû•Í∞Ä Îß§ÎèÑ\n"
            message += "**!Îß§ÎèÑ [ÎßàÏºì] [ÏàòÎüâ] [Í∞ÄÍ≤©]** - ÏßÄÏ†ïÍ∞Ä Îß§ÎèÑ\n"
            message += "**!Ï£ºÎ¨∏Ï°∞Ìöå [UUID]** - Ï£ºÎ¨∏ Ï†ïÎ≥¥ Ï°∞Ìöå\n"
            message += "**!Ï£ºÎ¨∏Ï∑®ÏÜå [UUID]** - Ï£ºÎ¨∏ Ï∑®ÏÜå\n\n"

            message += "**üîÑ Î¨¥ÌïúÎß§ÏàòÎ≤ï Î™ÖÎ†πÏñ¥ (Í¥ÄÎ¶¨Ïûê Ï†ÑÏö©)**\n"
            message += "**!Î¨¥ÌïúÎß§ÏàòÏãúÏûë [ÎßàÏºì] [Ï¥àÍ∏∞Í∏àÏï°]** - Î¨¥ÌïúÎß§ÏàòÎ≤ï ÏãúÏûë\n"
            message += "**!Î¨¥ÌïúÎß§ÏàòÏ°∞Ìöå [ÎßàÏºì]** - Î¨¥ÌïúÎß§ÏàòÎ≤ï ÏÉÅÌÉú Ï°∞Ìöå\n"
            message += "**!Î¨¥ÌïúÎß§ÏàòÏ¢ÖÎ£å [ÎßàÏºì] [Í∞ïÏ†úÎß§ÎèÑ]** - Î¨¥ÌïúÎß§ÏàòÎ≤ï Ï¢ÖÎ£å\n"
            message += "  ÏòàÏãú: `!Î¨¥ÌïúÎß§ÏàòÏãúÏûë KRW-BTC 100000`\n"
            message += "  ÏòàÏãú: `!Î¨¥ÌïúÎß§ÏàòÏ¢ÖÎ£å KRW-BTC true` (Í∞ïÏ†úÎß§ÎèÑ)\n\n"

            message += "**‚ö†Ô∏è Í±∞Îûò Ï†úÌïúÏÇ¨Ìï≠**\n"
            message += (
                f"‚Ä¢ ÏµúÎåÄ Í±∞Îûò Í∏àÏï°: {DiscordConstants.MAX_TRADE_AMOUNT_KRW:,}Ïõê\n"
            )
            message += (
                f"‚Ä¢ ÏµúÎåÄ BTC Í±∞ÎûòÎüâ: {DiscordConstants.MAX_TRADE_VOLUME_BTC} BTC\n"
            )
            message += "‚Ä¢ Î™®Îì† Í±∞ÎûòÎäî ÌôïÏù∏ Îã®Í≥ÑÎ•º Í±∞Ïπ©ÎãàÎã§\n\n"

        message += "**!ÎèÑÏõÄÎßê** - Ïù¥ ÎèÑÏõÄÎßêÏùÑ ÌëúÏãúÌï©ÎãàÎã§\n"

        await ctx.send(message)

    return help_command


def setup_bot_commands(
    bot_adapter: DiscordAdapter,
    account_usecase: AccountUseCase,
    ticker_usecase: TickerUseCase,
    order_usecase: OrderUseCase,
    infinite_buying_usecase: InfiniteBuyingUsecase | None = None,
) -> None:
    """Discord BotÏóê Ïª§Îß®ÎìúÎ•º Îì±Î°ùÌï©ÎãàÎã§."""
    # Í∏∞Ï°¥ Ïª§Îß®ÎìúÎì§
    balance_command = _create_balance_command(account_usecase)
    price_command = _create_price_command(ticker_usecase)
    help_command = _create_help_command()

    # ÏÉàÎ°úÏö¥ Í±∞Îûò Ïª§Îß®ÎìúÎì§
    trade_commands = _create_buy_commands(order_usecase)
    order_commands = _create_order_commands(order_usecase)

    # Î¥áÏóê Ïª§Îß®Îìú Îì±Î°ù
    bot_adapter.add_command(balance_command)
    bot_adapter.add_command(price_command)
    bot_adapter.add_command(help_command)

    # Í±∞Îûò Ïª§Îß®ÎìúÎì§ Îì±Î°ù
    for command in trade_commands:
        bot_adapter.add_command(command)

    # Ï£ºÎ¨∏ Í¥ÄÎ¶¨ Ïª§Îß®ÎìúÎì§ Îì±Î°ù
    for command in order_commands:
        bot_adapter.add_command(command)

    # Î¨¥ÌïúÎß§ÏàòÎ≤ï Ïª§Îß®ÎìúÎì§ Îì±Î°ù
    if infinite_buying_usecase:
        infinite_buying_commands = _create_infinite_buying_commands(
            infinite_buying_usecase
        )
        for command in infinite_buying_commands:
            bot_adapter.add_command(command)
