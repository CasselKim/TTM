[tool.poetry]
name = "ttm"
version = "0.1.0"
description = ""
authors = ["CasselKim <seongr39@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "3.12"
fastapi = "^0.104.1"
sqlalchemy = "^2.0.23"
alembic = "^1.12.1"
redis = "^5.0.1"
requests = "^2.31.0"
uvicorn = "^0.23.2"
setuptools = "^68.2.2"
mysqlclient = "^2.2.0"
python-dotenv = "^1.0.0"
httpx = "^0.28.1"
pyjwt = "^2.10.1"
pytest-asyncio = "^0.26.0"
dependency-injector = "^4.46.0"


[tool.poetry.group.dev.dependencies]
pre-commit = "^3.5.0"
pytest = "^8.3.5"
mypy = "^1.15.0"
ruff = "^0.11.11"
pytest-bdd = "^7.0.0"
freezegun = "^1.2.2"
coverage = "^7.3.2"
sqlalchemy2-stubs = "^0.0.2a36"
typer = "^0.9.0"
types-redis = "^4.6.0.9"
types-requests = "^2.32.0"
types-setuptools = "^79.0.0"
uvicorn = "0.23.2"


[tool.poetry.group.pytest-bdd.dependencies]
black = "^23.10.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Ruff configuration
[tool.ruff]
target-version = "py312"
line-length = 88
extend-exclude = [
    "alembic/versions/",
    "test/",
    ".venv/",
    "__pycache__/",
]

[tool.ruff.lint]
# Enable rules equivalent to black, isort, flake8
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "C4",    # flake8-comprehensions
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "YTT",   # flake8-2020
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "C90",   # mccabe
    "DJ",    # flake8-django
    "ERA",   # eradicate
    "PL",    # pylint
    "TRY",   # tryceratops
    "RUF",   # ruff-specific rules
]

ignore = [
    "E501",    # line too long (handled by formatter)
    "S101",    # assert detected
    "PLR0913", # too many arguments
    "TRY003",  # avoid specifying long messages outside exception class
    "FBT001",  # boolean positional arg in function definition
    "FBT002",  # boolean default positional argument in function definition
    "B008",    # Do not perform function call in argument defaults (FastAPI dependency injection 허용)
    "S104",    # Possible binding to all interfaces (개발환경에서 허용)
    "BLE001",  # Do not catch blind exception (일반적인 Exception 처리 허용)
    "TRY400",  # Use logging.exception instead of logging.error (현재 스타일 유지)
    "B904",    # Within an except clause, raise exceptions with raise ... from err (현재 스타일 유지)
    "TRY301",  # Abstract raise to an inner function (간단한 raise 허용)
    "N818",    # Exception name should be named with an Error suffix (현재 네이밍 유지)
    "PLC2401", # Variable name contains a non-ASCII character (한국어 enum 허용)
    "ERA001",  # Found commented-out code (주석 코드 허용)
    "S113",    # Probable use of requests call without timeout (현재 코드 스타일 유지)
]

# Exclude specific directories and files
exclude = [
    "database.py",
    "base_orm.py",
    "alembic/",
    "test/",
    "bdd/",
]

[tool.ruff.lint.per-file-ignores]
"test/**/*.py" = ["S101", "PLR2004", "S105", "S106"]
"alembic/**/*.py" = ["E501", "F401"]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Use spaces around the equals sign
indent-style = "space"
# Respect magic trailing commas
skip-magic-trailing-comma = false
# Automatically detect line ending
line-ending = "auto"

[tool.ruff.lint.isort]
# Import sorting configuration
known-first-party = ["app", "common"]
force-single-line = false
force-sort-within-sections = false
split-on-trailing-comma = true
